 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

enum VehicleType {
  OpenTruck
  DumpTruck
  Compactor
  ContainerCarrier
}

enum RoleType {
  SystemAdmin
  STSManager
  LandfillManager
  Unassigned
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String
  password   String
  image      String?   @default("https://static.productionready.io/images/smiley-cyrus.jpg")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  roleId     Int       @default(4)
  role       Role      @relation(fields: [roleId], references: [id])
  vehicleEntries  VehicleEntry[]
  managerOfSTS    STS[]
  truckDumpEntries TruckDumpEntry[]
  managerOfLandfill Landfill[]
  passwordResetToken PasswordResetToken? 
}
model PasswordResetToken {
  id                Int      @id @default(autoincrement())
  token             String   @unique
  userId            Int      @unique
  user              User    @relation(fields: [userId], references: [id])
  expiration        DateTime
  createdAt         DateTime @default(now())
  @@index([userId], name: "idx_password_reset_token_user")
}
model Role {
  id          Int      @id @default(autoincrement())
  type        RoleType @default(Unassigned) @unique
  users       User[]
  permissions Permission[] 
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roleId Int
  role  Role   @relation(fields: [roleId], references: [id])
}
 
model Vehicle {
  id            Int      @id @default(autoincrement())
  vehicleNumber String   @unique
  type          VehicleType
  capacity      Float
  vehicleEntries VehicleEntry[]
  truckDumpEntries TruckDumpEntry[]
}

model STS {
  id          Int      @id @default(autoincrement())
  wardNumber  Int
  capacity    Int      // Capacity in tonnes for clearer understanding
  lat         Float
  lon         Float
  managerId   Int?
  manager     User?    @relation(fields: [managerId], references: [id])
  vehicleEntries VehicleEntry[]
}

model VehicleEntry {
  id              Int      @id @default(autoincrement())
  stsId           Int
  sts             STS      @relation(fields: [stsId], references: [id])
  vehicleId       Int
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  volumeOfWaste   Int
  timeOfArrival   DateTime
  timeOfDeparture DateTime
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}

model TruckDumpEntry {
  id              Int      @id @default(autoincrement())
  vehicleId       Int
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  volumeOfWaste   Int
  timeOfArrival   DateTime
  timeOfDeparture DateTime
  landfillId      Int
  landfill        Landfill @relation(fields: [landfillId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}

model Landfill {
  id              Int      @id @default(autoincrement())
  name            String
  capacity        Int
  gpsCoords       String
  managerId       Int?
  manager         User?    @relation(fields: [managerId], references: [id])
  truckDumpEntries TruckDumpEntry[]
}
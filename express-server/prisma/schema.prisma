 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum VehicleType {
  OpenTruck
  DumpTruck
  Compactor
  ContainerCarrier
}

enum RoleType {
  SystemAdmin
  STSManager
  LandfillManager
  Unassigned
  Driver
}
model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  phone      String?   @unique
  name       String
  password   String
  image      String?   @default("https://static.productionready.io/images/smiley-cyrus.jpg")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  lastLogin  DateTime?
  lastLogout DateTime?
  roleId     Int       @default(4)
  role       Role      @relation(fields: [roleId], references: [id])
  vehicleEntries       VehicleEntry[] //STSManagers can have multiple vehicle entries 
  wasteEntries         WasteEntry[]   //STSManagers can have multiple waste entries
  truckDumpEntries     TruckDumpEntry[] //Landfill Managers can have multiple truck dump entries
  sts                  STS[]
  landfills            Landfill[]
  vehicles             Vehicle[] //Drivers can have multiple vehicles
  trips                Trip[] //Drivers can have multiple trips
  drivingLicense       String?  //Drivers can have driving license
  passwordResetToken   PasswordResetToken? 
  changedAdminPassword Boolean @default(false)
  @@index([roleId], name: "idx_user_role")
  @@index([name], name: "idx_user_name")
  @@index([email], name: "idx_user_email")
}
model PasswordResetToken {
  id                Int      @id @default(autoincrement())
  token             String   @unique
  userId            Int      @unique
  user              User    @relation(fields: [userId], references: [id])
  expiration        DateTime
  createdAt         DateTime @default(now())
  @@index([userId], name: "idx_password_reset_token_user")
}
model Role {
  id          Int      @id @default(autoincrement())
  type        RoleType @default(Unassigned) @unique
  users       User[]
  permissions Permission[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[]
}
 
model Vehicle {  // 147 vehicles
  id            Int      @id @default(autoincrement())
  registrationNumber String   @unique
  type          VehicleType
  name          String?
  drivers        User[]
  capacity      Int
  remainingCapacity Int
  lat           Float @default(0)
  lon           Float @default(0)
  isFull        Boolean @default(false)
  loaddedFuelCost Float
  unloadedFuelCost Float
  stsId        Int?
  sts          STS?      @relation(fields: [stsId], references: [id])
  vehicleEntries VehicleEntry[]
  trips          Trip[]
  @@index([type], name: "idx_vehicle_type")  
  @@index([capacity], name: "idx_vehicle_capacity")
  @@index([loaddedFuelCost], name: "idx_vehicle_loadded_fuel_cost")

}

model STS {  // 54 STS 
  id                  Int      @id @default(autoincrement())
  name               String?
  wardNumber          String
  capacity            Float
  currentWasteVolume  Float
  lat                 Float
  lon                 Float
  address             String?
  logo                String?
  managers             User[]
  vehicles            Vehicle[]
  vehicleEntries      VehicleEntry[]
  wasteEntries        WasteEntry[]
  @@index([wardNumber], name: "idx_sts_ward_number") 
  @@index([capacity], name: "idx_sts_capacity")
}

model VehicleEntry {  //StsManager can entry multiple vehicles enties 
  id              Int      @id @default(autoincrement())
  stsId           Int
  sts             STS      @relation(fields: [stsId], references: [id])
  vehicleId       Int
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  landfillId      Int @default(1)
  landfill        Landfill @relation(fields: [landfillId], references: [id])
  tripId          Int
  trip            Trip    @relation(fields: [tripId], references: [id])
  volumeOfWaste   Float
  timeOfArrival   DateTime
  timeOfDeparture DateTime
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  @@index([stsId], name: "idx_vehicle_entry_sts")
  @@index([vehicleId], name: "idx_vehicle_entry_vehicle")
  @@index([userId], name: "idx_vehicle_entry_user")
  @@index([timeOfArrival], name: "idx_vehicle_entry_time_of_arrival")
  @@index([timeOfDeparture], name: "idx_vehicle_entry_time_of_departure")
}

model Bill {
  id              Int      @id @default(autoincrement())
  paid            Boolean @default(false)
  amount          Float
  verified        Boolean @default(false)
  createdAt       DateTime @default(now())
  tripId          Int     @unique
  trip            Trip     @relation(fields: [tripId], references: [id])
}

model WasteEntry {  //StsManager can entry multiple vehicles enties 
  id              Int      @id @default(autoincrement())
  stsId           Int
  sts             STS      @relation(fields: [stsId], references: [id])
  volumeOfWaste   Float
  timeOfArrival   DateTime 
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  @@index([stsId], name: "idx_waste_entry_sts")
  @@index([userId], name: "idx_waste_entry_user")
  @@index([timeOfArrival], name: "idx_waste_entry_time_of_arrival")
}

model TruckDumpEntry {
  id              Int      @id @default(autoincrement())
  volumeOfWaste   Float
  timeOfArrival   DateTime
  timeOfDeparture DateTime
  landfillId      Int
  landfill        Landfill @relation(fields: [landfillId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  billId         Int       @default(0)
  tripId          Int
  trip            Trip     @relation(fields: [tripId], references: [id])
  createdAt       DateTime @default(now())
  @@index([landfillId], name: "idx_truck_dump_entry_landfill")
  @@index([userId], name: "idx_truck_dump_entry_user")
  @@index([timeOfArrival], name: "idx_truck_dump_entry_time_of_arrival")
  @@index([timeOfDeparture], name: "idx_truck_dump_entry_time_of_departure")

}

model Landfill {
  id              Int      @id @default(autoincrement())
  name            String
  capacity        Int
  currentWasteVolume Int
  startTime      String
  endTime        String
  gpsCoords       String
  lat             Float
  lon             Float
  address         String?
  managers        User[]  
  truckDumpEntries TruckDumpEntry[]
  trips           Trip[]
  vehicleEntries   VehicleEntry[]
  @@index([name], name: "idx_landfill_name")
  @@index([capacity], name: "idx_landfill_capacity")
}

model VehicleMeta{
  id Int @id @default(autoincrement())
  tripId Int
  trip Trip @relation(fields: [tripId], references: [id]) 
  lat Float
  lon Float
  weight Float
  timestamp DateTime @default(now())
}

model Trip{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  vehicleId Int
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  driverId Int
  driver User @relation(fields: [driverId], references: [id])
  startLandfillId Int
  startLandfill Landfill @relation(fields: [startLandfillId], references: [id])
  vehicleMetas VehicleMeta[]
  vehicleEntries VehicleEntry[]
  truckDumpEntries TruckDumpEntry[]
  completed Boolean @default(false)
  distance Float @default(0)
  duration Float @default(0)
  bill Bill?
}
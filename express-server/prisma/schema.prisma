 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum VehicleType {
  OpenTruck
  DumpTruck
  Compactor
  ContainerCarrier
}

enum RoleType {
  SystemAdmin
  STSManager
  LandfillManager
  Unassigned
  Driver
  ContractorManager
}
model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  phone      String?   @unique
  name       String
  password   String
  image      String?   @default("https://static.productionready.io/images/smiley-cyrus.jpg")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  lastLogin  DateTime?
  lastLogout DateTime?
  roleId     Int       @default(4)
  role       Role      @relation(fields: [roleId], references: [id])
  vehicleEntries       VehicleEntry[] //STSManagers can have multiple vehicle entries 
  wasteEntries         WasteEntry[]   //STSManagers can have multiple waste entries
  truckDumpEntries     TruckDumpEntry[] //Landfill Managers can have multiple truck dump entries
  sts                  STS[]
  landfills            Landfill[]
  vehicles             Vehicle[] //Drivers can have multiple vehicles
  trips                Trip[] //Drivers can have multiple trips
  tripPlans            TripPlan[] //Drivers can have multiple trip plans
  drivingLicense       String?  //Drivers can have driving license
  passwordResetToken   PasswordResetToken? 
  changedAdminPassword Boolean @default(false)
  faceVerificationAdded Boolean @default(false)
  faceData Json?
  deviceId String?
  fcmToken String?
  notifications         Notification[]
  contractor            Contractor[]
  accessLevel           String?
  @@index([roleId], name: "idx_user_role")
  @@index([name], name: "idx_user_name")
  @@index([email], name: "idx_user_email")
}
model PasswordResetToken {
  id                Int      @id @default(autoincrement())
  token             String   @unique
  userId            Int      @unique
  user              User    @relation(fields: [userId], references: [id])
  expiration        DateTime
  createdAt         DateTime @default(now())
  @@index([userId], name: "idx_password_reset_token_user")
}
model Role {
  id          Int      @id @default(autoincrement())
  type        RoleType @default(Unassigned) @unique
  users       User[]
  permissions Permission[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[]
}
 
model Vehicle {  // 147 vehicles
  id            Int      @id @default(autoincrement())
  registrationNumber String   @unique
  type          VehicleType
  name          String?
  status        String @default("Active") //Active, UnderMaintenance, Damaged, Stolen
  drivers        User[]
  capacity      Float
  remainingCapacity Float
  lat           Float @default(0)
  lon           Float @default(0)
  isFull        Boolean @default(false)
  loaddedFuelCost Float
  unloadedFuelCost Float
  stsId        Int?
  sts          STS?      @relation(fields: [stsId], references: [id])
  trips          Trip[]
  notifications         Notification[]
  tripPlans        TripPlan[]
  @@index([type], name: "idx_vehicle_type")  
  @@index([capacity], name: "idx_vehicle_capacity")
  @@index([loaddedFuelCost], name: "idx_vehicle_loadded_fuel_cost")

}

model STS {  // 54 STS 
  id                  Int      @id @default(autoincrement())
  name               String?
  wardNumber          String
  capacity            Float
  currentWasteVolume  Float
  lat                 Float
  lon                 Float
  address             String?
  logo                String?
  managers             User[]
  vehicles            Vehicle[]
  vehicleEntries      VehicleEntry[]
  wasteEntries        WasteEntry[]
  notifications         Notification[]
  tripPlanStss        TripPlanSts[]
  contractors         Contractor[]
  @@index([wardNumber], name: "idx_sts_ward_number") 
  @@index([capacity], name: "idx_sts_capacity")
}

model VehicleEntry {  //StsManager can entry multiple vehicles enties 
  id              Int      @id @default(autoincrement())
  stsId           Int
  sts             STS      @relation(fields: [stsId], references: [id])
  tripId          Int
  trip            Trip    @relation(fields: [tripId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  volumeOfWaste   Float
  timeOfArrival   DateTime
  timeOfDeparture DateTime
  createdAt       DateTime @default(now())
  @@index([stsId], name: "idx_vehicle_entry_sts")
  @@index([userId], name: "idx_vehicle_entry_user")
  @@index([timeOfArrival], name: "idx_vehicle_entry_time_of_arrival")
  @@index([timeOfDeparture], name: "idx_vehicle_entry_time_of_departure")
}

model Bill {
  id              Int      @id @default(autoincrement())
  paid            Boolean @default(false)
  amount          Float
  optimalAmount   Float?
  verified        Boolean @default(false)
  createdAt       DateTime @default(now())
  tripId          Int     @unique
  trip            Trip     @relation(fields: [tripId], references: [id])
}

model WasteEntry {  //StsManager can entry multiple vehicles enties 
  id              Int      @id @default(autoincrement())
  stsId           Int
  sts             STS      @relation(fields: [stsId], references: [id])
  volumeOfWaste   Float
  timeOfArrival   DateTime 
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  contractorId    Int
  contractor      Contractor @relation(fields: [contractorId], references: [id])
  wasteType       String @default("Domestic")
  vehicleType     String @default("Van")
  @@index([stsId], name: "idx_waste_entry_sts")
  @@index([userId], name: "idx_waste_entry_user")
  @@index([timeOfArrival], name: "idx_waste_entry_time_of_arrival")
}

model TruckDumpEntry {
  id              Int      @id @default(autoincrement())
  volumeOfWaste   Float
  timeOfArrival   DateTime
  timeOfDeparture DateTime
  tripId          Int
  trip            Trip     @relation(fields: [tripId], references: [id])
  landfillId      Int
  landfill        Landfill @relation(fields: [landfillId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  @@index([landfillId], name: "idx_truck_dump_entry_landfill")
  @@index([userId], name: "idx_truck_dump_entry_user")
  @@index([timeOfArrival], name: "idx_truck_dump_entry_time_of_arrival")
  @@index([timeOfDeparture], name: "idx_truck_dump_entry_time_of_departure")

}

model Landfill {
  id              Int      @id @default(autoincrement())
  name            String
  capacity        Float
  currentWasteVolume Float
  startTime      String
  endTime        String
  gpsCoords       String
  lat             Float
  lon             Float
  address         String?
  managers        User[]  
  truckDumpEntries TruckDumpEntry[]
  trips           Trip[]
  tripPlanLandfills TripPlanLandfill[]
  @@index([name], name: "idx_landfill_name")
  @@index([capacity], name: "idx_landfill_capacity")
}

model VehicleMeta{
  id Int @id @default(autoincrement())
  tripId Int
  trip Trip @relation(fields: [tripId], references: [id]) 
  lat Float
  lon Float
  weight Float
  timestamp DateTime @default(now())
}

model Trip{
  id Int @id @default(autoincrement())
  tripPlanId Int @unique
  tripPlan TripPlan @relation(fields: [tripPlanId], references: [id])
  createdAt DateTime @default(now())
  vehicleId Int
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  driverId Int
  driver User @relation(fields: [driverId], references: [id])
  startLandfillId Int
  startLandfill Landfill @relation(fields: [startLandfillId], references: [id])
  vehicleMetas VehicleMeta[]
  vehicleEntries VehicleEntry[]
  truckDumpEntries TruckDumpEntry[]
  completed Boolean @default(false)
  distance Float @default(0)
  duration Float @default(0)
  optimalDistance Float?
  optimalDuration Float?
  bill Bill?
  notifications         Notification[]
}

model Notification{
  id Int @id @default(autoincrement())
  message String?
  name String?
  type Int @default(0)
  driverId Int?
  driver User? @relation(fields: [driverId], references: [id])
  stsId Int?
  sts STS? @relation(fields: [stsId], references: [id])
  truckId Int?
  truck Vehicle? @relation(fields: [truckId], references: [id])
  tripId Int?
  trip Trip? @relation(fields: [tripId], references: [id])
  timeStamp DateTime @default(now())
  extra String?
}

model TripPlan {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  type String @default("human") //human, machine
  driverId Int
  driver User @relation(fields: [driverId], references: [id])
  vehicleId Int
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  tripPlanStss TripPlanSts[]
  tripPlanLandfills TripPlanLandfill[]
  trip Trip?
}

model TripPlanSts {
  id Int @id @default(autoincrement())
  tripPlanId Int
  tripPlan TripPlan @relation(fields: [tripPlanId], references: [id])
  stsId Int
  sts STS @relation(fields: [stsId], references: [id])
  time DateTime
  visited Boolean @default(false)
  visitedAt DateTime?
  weiqht Float?
}

model TripPlanLandfill {
  id Int @id @default(autoincrement())
  tripPlanId Int
  tripPlan TripPlan @relation(fields: [tripPlanId], references: [id])
  landfillId Int
  landfill Landfill @relation(fields: [landfillId], references: [id])
  time DateTime
  visited Boolean @default(false)
  visitedAt DateTime?
  weiqht Float?
}


// final round

model Contractor {
  id                    Int      @id @default(autoincrement())
  companyName           String
  registrationId        String @unique
  registrationDate      DateTime
  tin                   String @unique
  phone                 String
  employees             Employee[]
  paymentPerTonnage     Float
  requiredWastePerDay   Float
  contractStartDate     DateTime
  contractEndDate       DateTime
  areaOfCollection      String //comma separated ward numbers
  stsId                 Int
  sts                   STS      @relation(fields: [stsId], references: [id])
  managers              User[]
  wasteEntries          WasteEntry[]
}

model Employee {
  id                    Int      @id @default(autoincrement())
  contractorId          Int
  contractor            Contractor @relation(fields: [contractorId], references: [id])
  name                  String
  dateOfBirth           DateTime
  dateOfHire            DateTime
  jobTitle              String
  paymentRatePerHour    Float
  phone                 String
  assignedCollectionRoute String //comma separated roads
}
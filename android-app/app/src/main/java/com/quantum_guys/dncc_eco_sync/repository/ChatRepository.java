package com.quantum_guys.dncc_eco_sync.repository;import android.app.Application;import android.os.AsyncTask;import androidx.lifecycle.LiveData;import com.quantum_guys.dncc_eco_sync.dao.DaoAccess;import com.quantum_guys.dncc_eco_sync.db.QuizResultDatabase;import com.quantum_guys.dncc_eco_sync.messege.model.Chat;import com.quantum_guys.dncc_eco_sync.messege.model.Chatlist;import com.quantum_guys.dncc_eco_sync.models.Post;import java.util.List;public class ChatRepository {    private final DaoAccess resultDao;    private final LiveData<List<Post>> allPosts;    public ChatRepository(Application application) {        QuizResultDatabase database = QuizResultDatabase.getInstance(application);        resultDao = database.daoAccess();        allPosts = resultDao.getAllSavedPost();    }    public LiveData<List<Chatlist>> getAllUser() {        return resultDao.getAllUser();    }    public void updateUser(Chatlist user) {        new UpdateUserAsyncTask(resultDao).execute(user);    }    public void insertUser(Chatlist user) {        new InsertUserAsyncTask(resultDao).execute(user);    }    public void deleteChat(String uniqueId) {        new DeleteChatTask(resultDao).execute(uniqueId);    }    public LiveData<List<Chat>> getAllMessage(String u) {        return resultDao.getAllChat(u);    }    public void insertMessage(Chat chat) {        new InsertMessageAsyncTask(resultDao).execute(chat);    }    private static class InsertMessageAsyncTask extends AsyncTask<Chat, Void, Void> {        private final DaoAccess resultDao;        private InsertMessageAsyncTask(DaoAccess resultDao) {            this.resultDao = resultDao;        }        @Override        protected Void doInBackground(Chat... results) {            resultDao.insertMessage(results[0]);            return null;        }    }    private static class DeleteChatTask extends AsyncTask<String, Void, Void> {        private final DaoAccess daoAccess;        private DeleteChatTask(DaoAccess daoAccess) {            this.daoAccess = daoAccess;        }        @Override        protected Void doInBackground(String... strings) {            daoAccess.deleteChat(strings[0]);            return null;        }    }    private static class InsertUserAsyncTask extends AsyncTask<Chatlist, Void, Void> {        private final DaoAccess resultDao;        private InsertUserAsyncTask(DaoAccess resultDao) {            this.resultDao = resultDao;        }        @Override        protected Void doInBackground(Chatlist... results) {            resultDao.insertUser(results[0]);            return null;        }    }    private static class UpdateUserAsyncTask extends AsyncTask<Chatlist, Void, Void> {        private final DaoAccess resultDao;        private UpdateUserAsyncTask(DaoAccess resultDao) {            this.resultDao = resultDao;        }        @Override        protected Void doInBackground(Chatlist... results) {            resultDao.insertUser(results[0]);            return null;        }    }}